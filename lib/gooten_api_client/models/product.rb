=begin
Gooten API

An overview of the various API methods that Gooten offers, including examples of each.

OpenAPI spec version: 1

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module GootenApiClient
  class Product
    # The product type id. Represents a type/class of products. Can later be passed into the productvariant service to get available product variations.
    attr_accessor :id

    # An id that syncs between printio's staging and live environments.
    attr_accessor :u_id

    attr_accessor :name

    attr_accessor :short_description

    # Whether or not the item returned is a Product, or ProductVariant. Items with a Sku will not have other product variants
    attr_accessor :has_available_product_variants

    # Whether or not the product has variants with templates.
    attr_accessor :has_product_templates

    # A value to sort featured items by. Note that this is null if IsFeatured=false
    attr_accessor :featured_index

    attr_accessor :max_zoom

    attr_accessor :retail_price

    # Content describing the product.
    attr_accessor :info

    # Product images. Note that this contains large and small images for web, mobile, etc
    attr_accessor :images

    attr_accessor :price_info

    attr_accessor :partner_price_info

    attr_accessor :categories

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'Id',
        
        :'u_id' => :'UId',
        
        :'name' => :'Name',
        
        :'short_description' => :'ShortDescription',
        
        :'has_available_product_variants' => :'HasAvailableProductVariants',
        
        :'has_product_templates' => :'HasProductTemplates',
        
        :'featured_index' => :'FeaturedIndex',
        
        :'max_zoom' => :'MaxZoom',
        
        :'retail_price' => :'RetailPrice',
        
        :'info' => :'Info',
        
        :'images' => :'Images',
        
        :'price_info' => :'PriceInfo',
        
        :'partner_price_info' => :'PartnerPriceInfo',
        
        :'categories' => :'Categories'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'u_id' => :'String',
        :'name' => :'String',
        :'short_description' => :'String',
        :'has_available_product_variants' => :'BOOLEAN',
        :'has_product_templates' => :'BOOLEAN',
        :'featured_index' => :'Integer',
        :'max_zoom' => :'Integer',
        :'retail_price' => :'ProductPriceInfo',
        :'info' => :'Array<ProductInfo>',
        :'images' => :'Array<ProductImage>',
        :'price_info' => :'ProductPriceInfo',
        :'partner_price_info' => :'ProductPriceInfo',
        :'categories' => :'Array<Category>'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'Id']
        self.id = attributes[:'Id']
      end
      
      if attributes[:'UId']
        self.u_id = attributes[:'UId']
      end
      
      if attributes[:'Name']
        self.name = attributes[:'Name']
      end
      
      if attributes[:'ShortDescription']
        self.short_description = attributes[:'ShortDescription']
      end
      
      if attributes[:'HasAvailableProductVariants']
        self.has_available_product_variants = attributes[:'HasAvailableProductVariants']
      end
      
      if attributes[:'HasProductTemplates']
        self.has_product_templates = attributes[:'HasProductTemplates']
      end
      
      if attributes[:'FeaturedIndex']
        self.featured_index = attributes[:'FeaturedIndex']
      end
      
      if attributes[:'MaxZoom']
        self.max_zoom = attributes[:'MaxZoom']
      end
      
      if attributes[:'RetailPrice']
        self.retail_price = attributes[:'RetailPrice']
      end
      
      if attributes[:'Info']
        if (value = attributes[:'Info']).is_a?(Array)
          self.info = value
        end
      end
      
      if attributes[:'Images']
        if (value = attributes[:'ProductImage']).is_a?(Array)
          self.images = value
        end
      end
      
      if attributes[:'PriceInfo']
        self.price_info = attributes[:'PriceInfo']
      end
      
      if attributes[:'PartnerPriceInfo']
        self.partner_price_info = attributes[:'PartnerPriceInfo']
      end
      
      if attributes[:'Categories']
        if (value = attributes[:'Categories']).is_a?(Array)
          self.categories = value
        end
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          u_id == o.u_id &&
          name == o.name &&
          short_description == o.short_description &&
          has_available_product_variants == o.has_available_product_variants &&
          has_product_templates == o.has_product_templates &&
          featured_index == o.featured_index &&
          max_zoom == o.max_zoom &&
          retail_price == o.retail_price &&
          info == o.info &&
          images == o.images &&
          price_info == o.price_info &&
          partner_price_info == o.partner_price_info &&
          categories == o.categories
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [id, u_id, name, short_description, has_available_product_variants, has_product_templates, featured_index, max_zoom, retail_price, info, images, price_info, partner_price_info, categories].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = GootenApiClient.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
